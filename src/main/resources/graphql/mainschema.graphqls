type Customer {
    id: ID!
    name: String!
    surname: String!
    pictureUrl: String
    createdBy: String!
    updatedBy: String!
}

enum Role {
    NORMAL
    ADMIN
}

type User {
    id: ID!
    username: String!
    role: Role!
}

input NewUser {
    username: String!
    password: String!
    role: Role = NORMAL
}

input UpdateUser {
    id: ID!
    username: String
    password: String
    role: Role
}

input NewCustomer {
    name: String!
    surname: String!
    picture: String
}

input UpdateCustomer {
    id: ID!
    name: String
    surname: String
    picture: String
}

input UserCredentials {
    username: String!
    password: String!
}

type Query {
    # Any authenticated user
    getCustomers: [Customer]!
    getCustomer(id: ID!): Customer

    # Only admin users
    getUsers: [User]!
}

type Mutation {
    # No auth
    getToken(username: String!, password: String!): String!

    # Any authenticated user
    createCustomer(customer: NewCustomer!): Customer!
    updateCustomer(customer: UpdateCustomer!): Customer!
    deleteCustomer(id: ID!): Boolean

    # Only admin users
    createUser(user: NewUser!): User!
    updateUser(user: UpdateUser!): User!
    deleteUser(id: ID!): Boolean
}